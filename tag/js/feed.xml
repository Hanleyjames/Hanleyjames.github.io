<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/js/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2024-05-05T11:42:11-06:00</updated>
  <id>http://localhost:4000/tag/js/feed.xml</id>

  
  
  

  
    <title type="html">Hanleyjames.github.io | </title>
  

  
    <subtitle>A blog about software engineering and books</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">JS Malware Obsfucation</title>
      <link href="http://localhost:4000/js-malware-Obsfucation" rel="alternate" type="text/html" title="JS Malware Obsfucation" />
      <published>2024-05-04T05:00:00-06:00</published>
      <updated>2024-05-04T05:00:00-06:00</updated>
      <id>http://localhost:4000/js-malware-Obsfucation</id>
      <content type="html" xml:base="http://localhost:4000/js-malware-Obsfucation">&lt;p&gt;I have been spending my free time recently learning how Javascript malware works, and what are some common methods for infection. While this might be something others know or have touched upon, for me this is all new. My knowledge of JS Malware in recent memory really only dealt with cryptomining. Some of the things that I am coming to learn is the majority will focus on windows machines. Primarily (I don’t have enough experience to say this with confidence), they use &lt;a href=&quot;https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc738350(v=ws.10)&quot;&gt;Windows Script Host/WSH&lt;/a&gt; to do the majority of the work. Either from there they use WSH or &lt;a href=&quot;https://learn.microsoft.com/en-us/previous-versions/windows/desktop/automat/activex-objects&quot;&gt;ActiveXObjects&lt;/a&gt; to write files. I am not really sure which ones are examples of those that effect unix based systems that are not either hijacked node packages, or&lt;/p&gt;

&lt;h3 id=&quot;obfuscation&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Obfuscation_(software)&quot;&gt;Obfuscation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Part of what makes JS Malware interesting to me, is at face value I am not looking at compiled code where I would need to decompile it or look at the side effects of it running to get an idea of what it is doing. I should(in theory), be able to step through and clean the code up, and what I don’t understand I should be able to run in parts to build those things. The primary ways I have seen so far that JS Malware does so is the following:&lt;/p&gt;

&lt;h3 id=&quot;comment-bloat&quot;&gt;Comment bloat&lt;/h3&gt;

&lt;p&gt;I have looked at Wikiloader, SSloader and a few other samples, and they will bloat the code with a lot of comments. These are often just words to fill space, or sometimes contain more code to obfuscate the payload further.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/24-5-4-wikiloader.JPG&quot; alt=&quot;Wikiloader&quot; title=&quot;Wikiloader&quot; /&gt;
&lt;img src=&quot;/assets/images/24-5-4-SSLoad.JPG&quot; alt=&quot;SSload&quot; title=&quot;SSLoad&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hex-and-unicode&quot;&gt;Hex and Unicode&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Any set of characters in Hex or Unicode are interpolated. This means I can hide certain aspects of code in a way that is not clear or visible at first. An example would be:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  String[&apos;\u0070\u0072\u006f\u0074\u006f\u0074\u0079\u0070\u0065&apos;].test = function(){
      console.log(&apos;test&apos;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This creates a prototype function called test, which more cleanly looks like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    String[&apos;prototype&apos;].test = function(){
        console.log(&apos;test&apos;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am open to being corrected if wrong, but JS cannot use String.’prototype’.Function =()=&amp;gt;{…}. Often when ‘prototype’ or ‘constructor’ is used, its used in the way listed above. Otherwise these strings are used to obscure commands used by WSH or ActiveXObjects.&lt;/p&gt;

&lt;h3 id=&quot;eval&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;Eval&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Eval is kind of a fun, nasty and slow way of hiding code. This often uses hex, unicode, base64 decoded strings or charCodes to hide a payload.  Any string that comes in such as the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    eval(&quot;let murr = 1200; console.log(murr);&quot;);
    1200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows someone to use one of the approaches above, to build javascript that will execute further obscured code.&lt;/p&gt;

&lt;h3 id=&quot;function-and-variable-bloating&quot;&gt;Function and Variable bloating&lt;/h3&gt;

&lt;p&gt;This is relatively straight forward. A developer hides the intent behind as much obscure functions, calling them and creating variables that will call each other. This just is more to waste time making it hard to figure out exactly what is being called. An example is this Cryptodrainer js file. While there is some visible intent in this file, most of the prior is overwhelming, and done with intent to make it that way. We’re left with 85k lines of functions that just seems like a marathon of a wall.
&lt;img src=&quot;/assets/images/24-5-4-CryptoDrainer.JPG&quot; alt=&quot;CryptoDrainer&quot; title=&quot;CryptoDrainer&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h3&gt;

&lt;p&gt;I am sure there are different ways of things being done, but these are the most common that I have run into. I am going to take this as a living breathing document, and hopefully will return to update these as I build more information around it. I will be producing articles that are more about processing individual JS Malware files, and going through things that I think are unique or interesting. Hopefully, someone here finds them as interesting as I do.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>James Hanley</name>
        
        
      </author>

      

      
        <category term="Malware" />
      
        <category term="JS" />
      

      
        <summary type="html">I have been spending my free time recently learning how Javascript malware works, and what are some common methods for infection. While this might be something others know or have touched upon, for me this is all new. My knowledge of JS Malware in recent memory really only dealt with cryptomining. Some of the things that I am coming to learn is the majority will focus on windows machines. Primarily (I don’t have enough experience to say this with confidence), they use Windows Script Host/WSH to do the majority of the work. Either from there they use WSH or ActiveXObjects to write files. I am not really sure which ones are examples of those that effect unix based systems that are not either hijacked node packages, or</summary>
      

      
      
    </entry>
  
</feed>
